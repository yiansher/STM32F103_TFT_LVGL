
TFT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c228  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb00  0801fb00  0003000c  2**0
                  CONTENTS
  4 .ARM          00000000  0801fb00  0801fb00  0003000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801fb00  0801fb00  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb00  0801fb00  0002fb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb04  0801fb04  0002fb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801fb08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  0801fb14  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  0801fb14  00030154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df6c  00000000  00000000  00030035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002684  00000000  00000000  0003dfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00040628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00041578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a816  00000000  00000000  000423b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117d7  00000000  00000000  0005cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f1f  00000000  00000000  0006e39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001082bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  0010830c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080038c0 	.word	0x080038c0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080038c0 	.word	0x080038c0

08000224 <TFT_init>:
 * @description: Init lcd
 * @return {*}
 * @author: ASWaterbenben
 */
void TFT_init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
//    tearing_effect_line_off();
//    display_inversion_on();
//    wake_up_lcd();
//    display_on();

    SPI_RST_0;//复位
 8000228:	2200      	movs	r2, #0
 800022a:	2108      	movs	r1, #8
 800022c:	48fc      	ldr	r0, [pc, #1008]	; (8000620 <TFT_init+0x3fc>)
 800022e:	f001 fdf5 	bl	8001e1c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000232:	2064      	movs	r0, #100	; 0x64
 8000234:	f000 feaa 	bl	8000f8c <HAL_Delay>
    SPI_RST_1;
 8000238:	2201      	movs	r2, #1
 800023a:	2108      	movs	r1, #8
 800023c:	48f8      	ldr	r0, [pc, #992]	; (8000620 <TFT_init+0x3fc>)
 800023e:	f001 fded 	bl	8001e1c <HAL_GPIO_WritePin>
    SPI_CS_0;
 8000242:	2200      	movs	r2, #0
 8000244:	2104      	movs	r1, #4
 8000246:	48f6      	ldr	r0, [pc, #984]	; (8000620 <TFT_init+0x3fc>)
 8000248:	f001 fde8 	bl	8001e1c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800024c:	2064      	movs	r0, #100	; 0x64
 800024e:	f000 fe9d 	bl	8000f8c <HAL_Delay>

    TFT_send_cmd(0xEF);         //使用指令2
 8000252:	20ef      	movs	r0, #239	; 0xef
 8000254:	f000 fb22 	bl	800089c <TFT_send_cmd>
    TFT_send_cmd(0xEB);         //
 8000258:	20eb      	movs	r0, #235	; 0xeb
 800025a:	f000 fb1f 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x14);
 800025e:	2014      	movs	r0, #20
 8000260:	f000 fb36 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xFE);         //使用指令1
 8000264:	20fe      	movs	r0, #254	; 0xfe
 8000266:	f000 fb19 	bl	800089c <TFT_send_cmd>
    TFT_send_cmd(0xEF);         //使用指令2  设置inter指令可用完成，复位之后才可关闭
 800026a:	20ef      	movs	r0, #239	; 0xef
 800026c:	f000 fb16 	bl	800089c <TFT_send_cmd>

    TFT_send_cmd(0xEB);
 8000270:	20eb      	movs	r0, #235	; 0xeb
 8000272:	f000 fb13 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x14);
 8000276:	2014      	movs	r0, #20
 8000278:	f000 fb2a 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x84);
 800027c:	2084      	movs	r0, #132	; 0x84
 800027e:	f000 fb0d 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x40);
 8000282:	2040      	movs	r0, #64	; 0x40
 8000284:	f000 fb24 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(0x85);
 8000288:	2085      	movs	r0, #133	; 0x85
 800028a:	f000 fb07 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0xFF);
 800028e:	20ff      	movs	r0, #255	; 0xff
 8000290:	f000 fb1e 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(0x86);
 8000294:	2086      	movs	r0, #134	; 0x86
 8000296:	f000 fb01 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0xFF);
 800029a:	20ff      	movs	r0, #255	; 0xff
 800029c:	f000 fb18 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(0x87);
 80002a0:	2087      	movs	r0, #135	; 0x87
 80002a2:	f000 fafb 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0xFF);
 80002a6:	20ff      	movs	r0, #255	; 0xff
 80002a8:	f000 fb12 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(0x88);
 80002ac:	2088      	movs	r0, #136	; 0x88
 80002ae:	f000 faf5 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x0A);
 80002b2:	200a      	movs	r0, #10
 80002b4:	f000 fb0c 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(0x89);
 80002b8:	2089      	movs	r0, #137	; 0x89
 80002ba:	f000 faef 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x21);
 80002be:	2021      	movs	r0, #33	; 0x21
 80002c0:	f000 fb06 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x8A);
 80002c4:	208a      	movs	r0, #138	; 0x8a
 80002c6:	f000 fae9 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x00);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f000 fb00 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x8B);
 80002d0:	208b      	movs	r0, #139	; 0x8b
 80002d2:	f000 fae3 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x80);
 80002d6:	2080      	movs	r0, #128	; 0x80
 80002d8:	f000 fafa 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x8C);
 80002dc:	208c      	movs	r0, #140	; 0x8c
 80002de:	f000 fadd 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x01);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 faf4 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x8D);
 80002e8:	208d      	movs	r0, #141	; 0x8d
 80002ea:	f000 fad7 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x01);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 faee 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x8E);
 80002f4:	208e      	movs	r0, #142	; 0x8e
 80002f6:	f000 fad1 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0xFF);
 80002fa:	20ff      	movs	r0, #255	; 0xff
 80002fc:	f000 fae8 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x8F);
 8000300:	208f      	movs	r0, #143	; 0x8f
 8000302:	f000 facb 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0xFF);
 8000306:	20ff      	movs	r0, #255	; 0xff
 8000308:	f000 fae2 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xB6);     //外部指令  显示功能控制
 800030c:	20b6      	movs	r0, #182	; 0xb6
 800030e:	f000 fac5 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x00);        //扫描方向控制S1-S360 G1-32
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fadc 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x20);
 8000318:	2020      	movs	r0, #32
 800031a:	f000 fad9 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x36);     //调整指令 存储控制 Memory Access Control
 800031e:	2036      	movs	r0, #54	; 0x36
 8000320:	f000 fabc 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x08);        //MY MX MV ML BGR MH X X
 8000324:	2008      	movs	r0, #8
 8000326:	f000 fad3 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x3A);     //调整指令  Pixel Format Set
 800032a:	203a      	movs	r0, #58	; 0x3a
 800032c:	f000 fab6 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x05);            //16bit MCU数据模式
 8000330:	2005      	movs	r0, #5
 8000332:	f000 facd 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x90);     //xxx
 8000336:	2090      	movs	r0, #144	; 0x90
 8000338:	f000 fab0 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x08);
 800033c:	2008      	movs	r0, #8
 800033e:	f000 fac7 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 8000342:	2008      	movs	r0, #8
 8000344:	f000 fac4 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 8000348:	2008      	movs	r0, #8
 800034a:	f000 fac1 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 800034e:	2008      	movs	r0, #8
 8000350:	f000 fabe 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xBD);     //XXX
 8000354:	20bd      	movs	r0, #189	; 0xbd
 8000356:	f000 faa1 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x06);
 800035a:	2006      	movs	r0, #6
 800035c:	f000 fab8 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xBC);     //XXX
 8000360:	20bc      	movs	r0, #188	; 0xbc
 8000362:	f000 fa9b 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x00);
 8000366:	2000      	movs	r0, #0
 8000368:	f000 fab2 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xFF);     //XXX
 800036c:	20ff      	movs	r0, #255	; 0xff
 800036e:	f000 fa95 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x60);
 8000372:	2060      	movs	r0, #96	; 0x60
 8000374:	f000 faac 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x01);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 faa9 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x04);
 800037e:	2004      	movs	r0, #4
 8000380:	f000 faa6 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xC3);     //  Vreg1a voltage Control
 8000384:	20c3      	movs	r0, #195	; 0xc3
 8000386:	f000 fa89 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x13);
 800038a:	2013      	movs	r0, #19
 800038c:	f000 faa0 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xC4);     // Vreg1b voltage Control
 8000390:	20c4      	movs	r0, #196	; 0xc4
 8000392:	f000 fa83 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x13);
 8000396:	2013      	movs	r0, #19
 8000398:	f000 fa9a 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xC9);     //Vreg2a voltage Control
 800039c:	20c9      	movs	r0, #201	; 0xc9
 800039e:	f000 fa7d 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x22);
 80003a2:	2022      	movs	r0, #34	; 0x22
 80003a4:	f000 fa94 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xBE);     //XXX
 80003a8:	20be      	movs	r0, #190	; 0xbe
 80003aa:	f000 fa77 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x11);
 80003ae:	2011      	movs	r0, #17
 80003b0:	f000 fa8e 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xE1);     //XXX
 80003b4:	20e1      	movs	r0, #225	; 0xe1
 80003b6:	f000 fa71 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x10);
 80003ba:	2010      	movs	r0, #16
 80003bc:	f000 fa88 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0E);
 80003c0:	200e      	movs	r0, #14
 80003c2:	f000 fa85 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xDF);     //XXX
 80003c6:	20df      	movs	r0, #223	; 0xdf
 80003c8:	f000 fa68 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x21);
 80003cc:	2021      	movs	r0, #33	; 0x21
 80003ce:	f000 fa7f 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0c);
 80003d2:	200c      	movs	r0, #12
 80003d4:	f000 fa7c 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x02);
 80003d8:	2002      	movs	r0, #2
 80003da:	f000 fa79 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xF0);     //GAMMA1
 80003de:	20f0      	movs	r0, #240	; 0xf0
 80003e0:	f000 fa5c 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x45);
 80003e4:	2045      	movs	r0, #69	; 0x45
 80003e6:	f000 fa73 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x09);
 80003ea:	2009      	movs	r0, #9
 80003ec:	f000 fa70 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 80003f0:	2008      	movs	r0, #8
 80003f2:	f000 fa6d 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 80003f6:	2008      	movs	r0, #8
 80003f8:	f000 fa6a 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x26);
 80003fc:	2026      	movs	r0, #38	; 0x26
 80003fe:	f000 fa67 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x2A);
 8000402:	202a      	movs	r0, #42	; 0x2a
 8000404:	f000 fa64 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xF1);     //GAMMA2
 8000408:	20f1      	movs	r0, #241	; 0xf1
 800040a:	f000 fa47 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x43);
 800040e:	2043      	movs	r0, #67	; 0x43
 8000410:	f000 fa5e 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 8000414:	2070      	movs	r0, #112	; 0x70
 8000416:	f000 fa5b 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x72);
 800041a:	2072      	movs	r0, #114	; 0x72
 800041c:	f000 fa58 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x36);
 8000420:	2036      	movs	r0, #54	; 0x36
 8000422:	f000 fa55 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x37);
 8000426:	2037      	movs	r0, #55	; 0x37
 8000428:	f000 fa52 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x6F);
 800042c:	206f      	movs	r0, #111	; 0x6f
 800042e:	f000 fa4f 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xF2);     //GAMMA3
 8000432:	20f2      	movs	r0, #242	; 0xf2
 8000434:	f000 fa32 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x45);
 8000438:	2045      	movs	r0, #69	; 0x45
 800043a:	f000 fa49 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x09);
 800043e:	2009      	movs	r0, #9
 8000440:	f000 fa46 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 8000444:	2008      	movs	r0, #8
 8000446:	f000 fa43 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 800044a:	2008      	movs	r0, #8
 800044c:	f000 fa40 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x26);
 8000450:	2026      	movs	r0, #38	; 0x26
 8000452:	f000 fa3d 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x2A);
 8000456:	202a      	movs	r0, #42	; 0x2a
 8000458:	f000 fa3a 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xF3);     ////GAMMA4
 800045c:	20f3      	movs	r0, #243	; 0xf3
 800045e:	f000 fa1d 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x43);
 8000462:	2043      	movs	r0, #67	; 0x43
 8000464:	f000 fa34 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 8000468:	2070      	movs	r0, #112	; 0x70
 800046a:	f000 fa31 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x72);
 800046e:	2072      	movs	r0, #114	; 0x72
 8000470:	f000 fa2e 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x36);
 8000474:	2036      	movs	r0, #54	; 0x36
 8000476:	f000 fa2b 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x37);
 800047a:	2037      	movs	r0, #55	; 0x37
 800047c:	f000 fa28 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x6F);
 8000480:	206f      	movs	r0, #111	; 0x6f
 8000482:	f000 fa25 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xED);     //XXX
 8000486:	20ed      	movs	r0, #237	; 0xed
 8000488:	f000 fa08 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x1B);
 800048c:	201b      	movs	r0, #27
 800048e:	f000 fa1f 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0B);
 8000492:	200b      	movs	r0, #11
 8000494:	f000 fa1c 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xAE);     //XXX
 8000498:	20ae      	movs	r0, #174	; 0xae
 800049a:	f000 f9ff 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x77);
 800049e:	2077      	movs	r0, #119	; 0x77
 80004a0:	f000 fa16 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xCD);     //XXX
 80004a4:	20cd      	movs	r0, #205	; 0xcd
 80004a6:	f000 f9f9 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x63);
 80004aa:	2063      	movs	r0, #99	; 0x63
 80004ac:	f000 fa10 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x70);
 80004b0:	2070      	movs	r0, #112	; 0x70
 80004b2:	f000 f9f3 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x07);
 80004b6:	2007      	movs	r0, #7
 80004b8:	f000 fa0a 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x07);
 80004bc:	2007      	movs	r0, #7
 80004be:	f000 fa07 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x04);
 80004c2:	2004      	movs	r0, #4
 80004c4:	f000 fa04 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0E);
 80004c8:	200e      	movs	r0, #14
 80004ca:	f000 fa01 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0F);
 80004ce:	200f      	movs	r0, #15
 80004d0:	f000 f9fe 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x09);
 80004d4:	2009      	movs	r0, #9
 80004d6:	f000 f9fb 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x07);
 80004da:	2007      	movs	r0, #7
 80004dc:	f000 f9f8 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x08);
 80004e0:	2008      	movs	r0, #8
 80004e2:	f000 f9f5 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x03);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f9f2 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0xE8);     //Frame Rate
 80004ec:	20e8      	movs	r0, #232	; 0xe8
 80004ee:	f000 f9d5 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x34);
 80004f2:	2034      	movs	r0, #52	; 0x34
 80004f4:	f000 f9ec 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x62);     //XXX
 80004f8:	2062      	movs	r0, #98	; 0x62
 80004fa:	f000 f9cf 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x18);
 80004fe:	2018      	movs	r0, #24
 8000500:	f000 f9e6 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0D);
 8000504:	200d      	movs	r0, #13
 8000506:	f000 f9e3 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x71);
 800050a:	2071      	movs	r0, #113	; 0x71
 800050c:	f000 f9e0 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xED);
 8000510:	20ed      	movs	r0, #237	; 0xed
 8000512:	f000 f9dd 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 8000516:	2070      	movs	r0, #112	; 0x70
 8000518:	f000 f9da 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 800051c:	2070      	movs	r0, #112	; 0x70
 800051e:	f000 f9d7 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x18);
 8000522:	2018      	movs	r0, #24
 8000524:	f000 f9d4 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x0F);
 8000528:	200f      	movs	r0, #15
 800052a:	f000 f9d1 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x71);
 800052e:	2071      	movs	r0, #113	; 0x71
 8000530:	f000 f9ce 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xEF);
 8000534:	20ef      	movs	r0, #239	; 0xef
 8000536:	f000 f9cb 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 800053a:	2070      	movs	r0, #112	; 0x70
 800053c:	f000 f9c8 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 8000540:	2070      	movs	r0, #112	; 0x70
 8000542:	f000 f9c5 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x63);     //XXX
 8000546:	2063      	movs	r0, #99	; 0x63
 8000548:	f000 f9a8 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x18);
 800054c:	2018      	movs	r0, #24
 800054e:	f000 f9bf 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x11);
 8000552:	2011      	movs	r0, #17
 8000554:	f000 f9bc 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x71);
 8000558:	2071      	movs	r0, #113	; 0x71
 800055a:	f000 f9b9 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xF1);
 800055e:	20f1      	movs	r0, #241	; 0xf1
 8000560:	f000 f9b6 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 8000564:	2070      	movs	r0, #112	; 0x70
 8000566:	f000 f9b3 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 800056a:	2070      	movs	r0, #112	; 0x70
 800056c:	f000 f9b0 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x18);
 8000570:	2018      	movs	r0, #24
 8000572:	f000 f9ad 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x13);
 8000576:	2013      	movs	r0, #19
 8000578:	f000 f9aa 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x71);
 800057c:	2071      	movs	r0, #113	; 0x71
 800057e:	f000 f9a7 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xF3);
 8000582:	20f3      	movs	r0, #243	; 0xf3
 8000584:	f000 f9a4 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 8000588:	2070      	movs	r0, #112	; 0x70
 800058a:	f000 f9a1 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x70);
 800058e:	2070      	movs	r0, #112	; 0x70
 8000590:	f000 f99e 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x64);     //XXX
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 f981 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x28);
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 f998 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x29);
 80005a0:	2029      	movs	r0, #41	; 0x29
 80005a2:	f000 f995 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xF1);
 80005a6:	20f1      	movs	r0, #241	; 0xf1
 80005a8:	f000 f992 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x01);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 f98f 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xF1);
 80005b2:	20f1      	movs	r0, #241	; 0xf1
 80005b4:	f000 f98c 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f989 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x07);
 80005be:	2007      	movs	r0, #7
 80005c0:	f000 f986 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x66);     //XXX
 80005c4:	2066      	movs	r0, #102	; 0x66
 80005c6:	f000 f969 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x3C);
 80005ca:	203c      	movs	r0, #60	; 0x3c
 80005cc:	f000 f980 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f97d 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0xCD);
 80005d6:	20cd      	movs	r0, #205	; 0xcd
 80005d8:	f000 f97a 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x67);
 80005dc:	2067      	movs	r0, #103	; 0x67
 80005de:	f000 f977 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x45);
 80005e2:	2045      	movs	r0, #69	; 0x45
 80005e4:	f000 f974 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x45);
 80005e8:	2045      	movs	r0, #69	; 0x45
 80005ea:	f000 f971 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x10);
 80005ee:	2010      	movs	r0, #16
 80005f0:	f000 f96e 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f96b 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f968 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 f965 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x67);     //XXX
 8000606:	2067      	movs	r0, #103	; 0x67
 8000608:	f000 f948 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f95f 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x3C);
 8000612:	203c      	movs	r0, #60	; 0x3c
 8000614:	f000 f95c 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f959 	bl	80008d0 <TFT_send_data>
 800061e:	e001      	b.n	8000624 <TFT_init+0x400>
 8000620:	40010800 	.word	0x40010800
    TFT_send_data(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f953 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f950 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x01);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 f94d 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x54);
 8000636:	2054      	movs	r0, #84	; 0x54
 8000638:	f000 f94a 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x10);
 800063c:	2010      	movs	r0, #16
 800063e:	f000 f947 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x32);
 8000642:	2032      	movs	r0, #50	; 0x32
 8000644:	f000 f944 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x98);
 8000648:	2098      	movs	r0, #152	; 0x98
 800064a:	f000 f941 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x74);     //XXX
 800064e:	2074      	movs	r0, #116	; 0x74
 8000650:	f000 f924 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x10);
 8000654:	2010      	movs	r0, #16
 8000656:	f000 f93b 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x85);
 800065a:	2085      	movs	r0, #133	; 0x85
 800065c:	f000 f938 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x80);
 8000660:	2080      	movs	r0, #128	; 0x80
 8000662:	f000 f935 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f932 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f92f 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x4E);
 8000672:	204e      	movs	r0, #78	; 0x4e
 8000674:	f000 f92c 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f929 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x98);         //XXX
 800067e:	2098      	movs	r0, #152	; 0x98
 8000680:	f000 f90c 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0x3e);
 8000684:	203e      	movs	r0, #62	; 0x3e
 8000686:	f000 f923 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0x07);
 800068a:	2007      	movs	r0, #7
 800068c:	f000 f920 	bl	80008d0 <TFT_send_data>

    TFT_send_cmd(0x34);     //Tearing Effect Line Off
 8000690:	2034      	movs	r0, #52	; 0x34
 8000692:	f000 f903 	bl	800089c <TFT_send_cmd>
    TFT_send_cmd(0x21);     //Display Inversion ON
 8000696:	2021      	movs	r0, #33	; 0x21
 8000698:	f000 f900 	bl	800089c <TFT_send_cmd>
    TFT_send_cmd(0x11);     //唤醒
 800069c:	2011      	movs	r0, #17
 800069e:	f000 f8fd 	bl	800089c <TFT_send_cmd>
    //TFT_send_cmd(0x38);   //Idle Mode OFF
    HAL_Delay(120);
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f000 fc72 	bl	8000f8c <HAL_Delay>
    TFT_send_cmd(0x29);     //显示开
 80006a8:	2029      	movs	r0, #41	; 0x29
 80006aa:	f000 f8f7 	bl	800089c <TFT_send_cmd>
    HAL_Delay(20);
 80006ae:	2014      	movs	r0, #20
 80006b0:	f000 fc6c 	bl	8000f8c <HAL_Delay>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Add_set>:
 * @param y_start   ：Y周起始位置
 * @param x_end     ：X轴结束位置
 * @param y_end     ：Y轴结束位置
 */
void Add_set(unsigned char x_start, unsigned char y_start, unsigned char x_end, unsigned char y_end)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	4603      	mov	r3, r0
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	460b      	mov	r3, r1
 80006d0:	717b      	strb	r3, [r7, #5]
 80006d2:	4613      	mov	r3, r2
 80006d4:	713b      	strb	r3, [r7, #4]
    TFT_send_cmd(COLUMN_ADDRESS_SET); //设置列地址
 80006d6:	202a      	movs	r0, #42	; 0x2a
 80006d8:	f000 f8e0 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0);   //列地址起始
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f8f7 	bl	80008d0 <TFT_send_data>
    TFT_send_data(x_start);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f8f3 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0); //列地址结束
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 f8f0 	bl	80008d0 <TFT_send_data>
    TFT_send_data(x_end);
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f8ec 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(ROW_ADDRESS_SET); //设置行地址
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f000 f8cf 	bl	800089c <TFT_send_cmd>
    TFT_send_data(0);   //行地址起始
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f8e6 	bl	80008d0 <TFT_send_data>
    TFT_send_data(y_start);
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f8e2 	bl	80008d0 <TFT_send_data>
    TFT_send_data(0); //行地址结束
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f8df 	bl	80008d0 <TFT_send_data>
    TFT_send_data(y_end);
 8000712:	793b      	ldrb	r3, [r7, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8db 	bl	80008d0 <TFT_send_data>
    TFT_send_cmd(MEMORY_WRITE); //准备写入显示数据
 800071a:	202c      	movs	r0, #44	; 0x2c
 800071c:	f000 f8be 	bl	800089c <TFT_send_cmd>
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <TFT_full>:
/*!
 * @function    :LCD完全填充
 * @param color :填充颜色
 */
void TFT_full(unsigned int color)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    Add_set(0, 0, TFT_COLUMN_NUMBER - 1, TFT_LINE_NUMBER - 1);
 8000730:	23ef      	movs	r3, #239	; 0xef
 8000732:	22ef      	movs	r2, #239	; 0xef
 8000734:	2100      	movs	r1, #0
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ffbe 	bl	80006b8 <Add_set>
#if 1
    while (!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 800073c:	bf00      	nop
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <TFT_full+0x4c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b02      	cmp	r3, #2
 800074a:	d1f8      	bne.n	800073e <TFT_full+0x16>
    HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)color, FRESH_SIZE);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000752:	4619      	mov	r1, r3
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <TFT_full+0x4c>)
 8000756:	f002 f817 	bl	8002788 <HAL_SPI_Transmit_DMA>
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));
 800075a:	bf00      	nop
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <TFT_full+0x4c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	2b80      	cmp	r3, #128	; 0x80
 8000768:	d0f8      	beq.n	800075c <TFT_full+0x34>
            TFT_send_data(color >> 8);
            TFT_send_data(color);
        }
    }
#endif
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028

08000778 <Picture_display>:
 * @param length :图片长度
 * @param width  :图片宽度
 * @param ptr_pic:图片数据指针
 */
void Picture_display(uint16_t x, uint16_t y, uint16_t length, uint16_t width, const unsigned char *ptr_pic)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0
 800077e:	4604      	mov	r4, r0
 8000780:	4608      	mov	r0, r1
 8000782:	4611      	mov	r1, r2
 8000784:	461a      	mov	r2, r3
 8000786:	4623      	mov	r3, r4
 8000788:	80fb      	strh	r3, [r7, #6]
 800078a:	4603      	mov	r3, r0
 800078c:	80bb      	strh	r3, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	807b      	strh	r3, [r7, #2]
 8000792:	4613      	mov	r3, r2
 8000794:	803b      	strh	r3, [r7, #0]
    Add_set(x, y, x + length - 1, y + width - 1);
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	b2d9      	uxtb	r1, r3
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b2dc      	uxtb	r4, r3
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	883b      	ldrh	r3, [r7, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	3b01      	subs	r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4622      	mov	r2, r4
 80007c0:	f7ff ff7a 	bl	80006b8 <Add_set>
#if 1
    uint32_t num = length * width * 2, num1 = 0;
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	883a      	ldrh	r2, [r7, #0]
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
    uint8_t t = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
    SPI_CS_0;
 80007d8:	2200      	movs	r2, #0
 80007da:	2104      	movs	r1, #4
 80007dc:	481e      	ldr	r0, [pc, #120]	; (8000858 <Picture_display+0xe0>)
 80007de:	f001 fb1d 	bl	8001e1c <HAL_GPIO_WritePin>
    while (t)
 80007e2:	e02d      	b.n	8000840 <Picture_display+0xc8>
    {
        if (num > FRESH_SIZE)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d908      	bls.n	8000800 <Picture_display+0x88>
        {
            num -= FRESH_SIZE;
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80007f4:	3bfe      	subs	r3, #254	; 0xfe
 80007f6:	617b      	str	r3, [r7, #20]
            num1 = FRESH_SIZE;
 80007f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	e003      	b.n	8000808 <Picture_display+0x90>
        }
        else
        {
            t = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
            num1 = num;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
        }
        while (!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8000808:	bf00      	nop
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <Picture_display+0xe4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	2b02      	cmp	r3, #2
 8000816:	d1f8      	bne.n	800080a <Picture_display+0x92>
        HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)ptr_pic, num1);
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	b29b      	uxth	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000820:	480e      	ldr	r0, [pc, #56]	; (800085c <Picture_display+0xe4>)
 8000822:	f001 ffb1 	bl	8002788 <HAL_SPI_Transmit_DMA>
        while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));
 8000826:	bf00      	nop
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <Picture_display+0xe4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	2b80      	cmp	r3, #128	; 0x80
 8000834:	d0f8      	beq.n	8000828 <Picture_display+0xb0>
        ptr_pic += FRESH_SIZE;
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800083c:	33fe      	adds	r3, #254	; 0xfe
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (t)
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ce      	bne.n	80007e4 <Picture_display+0x6c>
    }
    SPI_CS_1;
 8000846:	2201      	movs	r2, #1
 8000848:	2104      	movs	r1, #4
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <Picture_display+0xe0>)
 800084c:	f001 fae6 	bl	8001e1c <HAL_GPIO_WritePin>
            TFT_send_data(*ptr_pic++);
            TFT_send_data(*ptr_pic++);
        }
    }
#endif
}
 8000850:	bf00      	nop
 8000852:	371c      	adds	r7, #28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	40010800 	.word	0x40010800
 800085c:	20000028 	.word	0x20000028

08000860 <SPI_SendByte>:
 * @param {unsigned char} byte
 * @return {*}
 * @author: ASWaterbenben
 */
void SPI_SendByte(unsigned char byte)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
    SPI_CS_0;
 800086a:	2200      	movs	r2, #0
 800086c:	2104      	movs	r1, #4
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <SPI_SendByte+0x34>)
 8000870:	f001 fad4 	bl	8001e1c <HAL_GPIO_WritePin>
    // Add SPI transmit ont byte function begin
    HAL_SPI_Transmit_DMA(&hspi1, &byte, 1);
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	2201      	movs	r2, #1
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <SPI_SendByte+0x38>)
 800087c:	f001 ff84 	bl	8002788 <HAL_SPI_Transmit_DMA>
    // Add SPI transmit ont byte function end
    SPI_CS_1;
 8000880:	2201      	movs	r2, #1
 8000882:	2104      	movs	r1, #4
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <SPI_SendByte+0x34>)
 8000886:	f001 fac9 	bl	8001e1c <HAL_GPIO_WritePin>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010800 	.word	0x40010800
 8000898:	20000028 	.word	0x20000028

0800089c <TFT_send_cmd>:
 * @param {unsigned char} o_command
 * @return {*}
 * @author: ASWaterbenben
 */
void TFT_send_cmd(unsigned char o_command)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    SPI_DC_0;
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <TFT_send_cmd+0x30>)
 80008ac:	f001 fab6 	bl	8001e1c <HAL_GPIO_WritePin>
    SPI_SendByte(o_command);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffd4 	bl	8000860 <SPI_SendByte>
    SPI_DC_1;
 80008b8:	2201      	movs	r2, #1
 80008ba:	2102      	movs	r1, #2
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <TFT_send_cmd+0x30>)
 80008be:	f001 faad 	bl	8001e1c <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010800 	.word	0x40010800

080008d0 <TFT_send_data>:
 * @param {unsigned char} o_data
 * @return {*}
 * @author: ASWaterbenben
 */
void TFT_send_data(unsigned char o_data)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
    SPI_SendByte(o_data);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffbf 	bl	8000860 <SPI_SendByte>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x38>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MX_DMA_Init+0x38>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x38>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200d      	movs	r0, #13
 8000910:	f000 fc37 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000914:	200d      	movs	r0, #13
 8000916:	f000 fc50 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_GPIO_Init+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_GPIO_Init+0x8c>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_GPIO_Init+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_GPIO_Init+0x8c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MX_GPIO_Init+0x8c>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x8c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0320 	and.w	r3, r3, #32
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_GPIO_Init+0x8c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MX_GPIO_Init+0x8c>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_GPIO_Init+0x8c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin|SPI1_CS_Pin|SPI1_RES_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	210e      	movs	r1, #14
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0x90>)
 800098a:	f001 fa47 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|SPI1_CS_Pin|SPI1_RES_Pin;
 800098e:	230e      	movs	r3, #14
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_GPIO_Init+0x90>)
 80009a6:	f001 f8a5 	bl	8001af4 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c2:	f000 fa81 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c6:	f000 f81b 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f7ff ffad 	bl	8000928 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ce:	f7ff ff8d 	bl	80008ec <MX_DMA_Init>
  MX_SPI1_Init();
 80009d2:	f000 f85f 	bl	8000a94 <MX_SPI1_Init>
  MX_TIM6_Init();
 80009d6:	f000 f977 	bl	8000cc8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80009da:	f000 f9d1 	bl	8000d80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TFT_init();
 80009de:	f7ff fc21 	bl	8000224 <TFT_init>
  TFT_full(WHITE);
 80009e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009e6:	f7ff fe9f 	bl	8000728 <TFT_full>
  Picture_display(0,0,240,240,gImage_eye);
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <main+0x40>)
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	23f0      	movs	r3, #240	; 0xf0
 80009f0:	22f0      	movs	r2, #240	; 0xf0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff febf 	bl	8000778 <Picture_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0x3e>
 80009fc:	080038e8 	.word	0x080038e8

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	; 0x40
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	2228      	movs	r2, #40	; 0x28
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 ff4e 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f9ff 	bl	8001e4c <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a54:	f000 f819 	bl	8000a8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fc6c 	bl	8002350 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a7e:	f000 f804 	bl	8000a8a <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3740      	adds	r7, #64	; 0x40
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
}
 8000a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <Error_Handler+0x8>

08000a94 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_SPI1_Init+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ae6:	f001 fdcb 	bl	8002680 <HAL_SPI_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af0:	f7ff ffcb 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000028 	.word	0x20000028
 8000afc:	40013000 	.word	0x40013000

08000b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <HAL_SPI_MspInit+0xd8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d156      	bne.n	8000bce <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b20:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <HAL_SPI_MspInit+0xdc>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <HAL_SPI_MspInit+0xdc>)
 8000b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_SPI_MspInit+0xdc>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <HAL_SPI_MspInit+0xdc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <HAL_SPI_MspInit+0xdc>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <HAL_SPI_MspInit+0xdc>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	481f      	ldr	r0, [pc, #124]	; (8000be0 <HAL_SPI_MspInit+0xe0>)
 8000b64:	f000 ffc6 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <HAL_SPI_MspInit+0xe0>)
 8000b7c:	f000 ffba 	bl	8001af4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_SPI_MspInit+0xe8>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000bb4:	f000 fb1c 	bl	80011f0 <HAL_DMA_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000bbe:	f7ff ff64 	bl	8000a8a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000bc6:	649a      	str	r2, [r3, #72]	; 0x48
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	20000080 	.word	0x20000080
 8000be8:	40020030 	.word	0x40020030

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_MspInit+0x40>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_MspInit+0x40>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_MspInit+0x40>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_MspInit+0x40>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_MspInit+0x40>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_MspInit+0x40>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 f96d 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Channel3_IRQHandler+0x10>)
 8000c86:	f000 fccb 	bl	8001620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000080 	.word	0x20000080

08000c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <USART1_IRQHandler+0x10>)
 8000c9a:	f002 fa37 	bl	800310c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000010c 	.word	0x2000010c

08000ca8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM6_IRQHandler+0x10>)
 8000cae:	f001 ffb2 	bl	8002c16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000c4 	.word	0x200000c4

08000cbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_TIM6_Init+0x68>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cde:	2224      	movs	r2, #36	; 0x24
 8000ce0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cf8:	f001 ff3e 	bl	8002b78 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d02:	f7ff fec2 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000d14:	f002 f92e 	bl	8002f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d1e:	f7ff feb4 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	40001000 	.word	0x40001000

08000d34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x44>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d113      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2036      	movs	r0, #54	; 0x36
 8000d64:	f000 fa0d 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d68:	2036      	movs	r0, #54	; 0x36
 8000d6a:	f000 fa26 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40001000 	.word	0x40001000
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART1_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000db8:	f002 f95a 	bl	8003070 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f7ff fe62 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000010c 	.word	0x2000010c
 8000dd0:	40013800 	.word	0x40013800

08000dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <HAL_UART_MspInit+0x9c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d139      	bne.n	8000e68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_UART_MspInit+0xa0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_UART_MspInit+0xa0>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <HAL_UART_MspInit+0xa4>)
 8000e3a:	f000 fe5b 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8000e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_UART_MspInit+0xa4>)
 8000e54:	f000 fe4e 	bl	8001af4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2025      	movs	r0, #37	; 0x25
 8000e5e:	f000 f990 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e62:	2025      	movs	r0, #37	; 0x25
 8000e64:	f000 f9a9 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800

08000e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ea2:	f7ff ff0b 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f002 fcdf 	bl	8003868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eaa:	f7ff fd87 	bl	80009bc <main>
  bx lr
 8000eae:	4770      	bx	lr
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eb8:	0801fb08 	.word	0x0801fb08
  ldr r2, =_sbss
 8000ebc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ec0:	20000154 	.word	0x20000154

08000ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_2_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x28>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x28>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f947 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fe82 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f95f 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f927 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x20>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000150 	.word	0x20000150

08000f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <HAL_GetTick+0x10>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000150 	.word	0x20000150

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fff0 	bl	8000f78 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffe0 	bl	8000f78 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4906      	ldr	r1, [pc, #24]	; (800106c <__NVIC_EnableIRQ+0x34>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff90 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff2d 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff42 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff35 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e059      	b.n	80012ba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_DMA_Init+0xd4>)
 800120e:	429a      	cmp	r2, r3
 8001210:	d80f      	bhi.n	8001232 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_DMA_Init+0xd8>)
 800121a:	4413      	add	r3, r2
 800121c:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <HAL_DMA_Init+0xdc>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	009a      	lsls	r2, r3, #2
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <HAL_DMA_Init+0xe0>)
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001230:	e00e      	b.n	8001250 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_DMA_Init+0xe4>)
 800123a:	4413      	add	r3, r2
 800123c:	4a23      	ldr	r2, [pc, #140]	; (80012cc <HAL_DMA_Init+0xdc>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	009a      	lsls	r2, r3, #2
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <HAL_DMA_Init+0xe8>)
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001266:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800126a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40020407 	.word	0x40020407
 80012c8:	bffdfff8 	.word	0xbffdfff8
 80012cc:	cccccccd 	.word	0xcccccccd
 80012d0:	40020000 	.word	0x40020000
 80012d4:	bffdfbf8 	.word	0xbffdfbf8
 80012d8:	40020400 	.word	0x40020400

080012dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Start_IT+0x20>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e04a      	b.n	8001392 <HAL_DMA_Start_IT+0xb6>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800130a:	2b01      	cmp	r3, #1
 800130c:	d13a      	bne.n	8001384 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2202      	movs	r2, #2
 8001312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fbb0 	bl	8001a98 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d008      	beq.n	8001352 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 020e 	orr.w	r2, r2, #14
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e00f      	b.n	8001372 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0204 	bic.w	r2, r2, #4
 8001360:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 020a 	orr.w	r2, r2, #10
 8001370:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e005      	b.n	8001390 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800138c:	2302      	movs	r3, #2
 800138e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e020      	b.n	8001404 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 020e 	bic.w	r2, r2, #14
 80013d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001422:	2b02      	cmp	r3, #2
 8001424:	d005      	beq.n	8001432 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2204      	movs	r2, #4
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e0d6      	b.n	80015e0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 020e 	bic.w	r2, r2, #14
 8001440:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <HAL_DMA_Abort_IT+0x1dc>)
 800145a:	429a      	cmp	r2, r3
 800145c:	d958      	bls.n	8001510 <HAL_DMA_Abort_IT+0x100>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <HAL_DMA_Abort_IT+0x1e0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04f      	beq.n	8001508 <HAL_DMA_Abort_IT+0xf8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <HAL_DMA_Abort_IT+0x1e4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d048      	beq.n	8001504 <HAL_DMA_Abort_IT+0xf4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a60      	ldr	r2, [pc, #384]	; (80015f8 <HAL_DMA_Abort_IT+0x1e8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d040      	beq.n	80014fe <HAL_DMA_Abort_IT+0xee>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_DMA_Abort_IT+0x1ec>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d038      	beq.n	80014f8 <HAL_DMA_Abort_IT+0xe8>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a5d      	ldr	r2, [pc, #372]	; (8001600 <HAL_DMA_Abort_IT+0x1f0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d030      	beq.n	80014f2 <HAL_DMA_Abort_IT+0xe2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a5b      	ldr	r2, [pc, #364]	; (8001604 <HAL_DMA_Abort_IT+0x1f4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d028      	beq.n	80014ec <HAL_DMA_Abort_IT+0xdc>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a53      	ldr	r2, [pc, #332]	; (80015ec <HAL_DMA_Abort_IT+0x1dc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d020      	beq.n	80014e6 <HAL_DMA_Abort_IT+0xd6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_DMA_Abort_IT+0x1f8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_DMA_Abort_IT+0xd2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_DMA_Abort_IT+0x1fc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d012      	beq.n	80014de <HAL_DMA_Abort_IT+0xce>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_DMA_Abort_IT+0x200>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00a      	beq.n	80014d8 <HAL_DMA_Abort_IT+0xc8>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a53      	ldr	r2, [pc, #332]	; (8001614 <HAL_DMA_Abort_IT+0x204>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d102      	bne.n	80014d2 <HAL_DMA_Abort_IT+0xc2>
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	e01b      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d6:	e018      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014dc:	e015      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014de:	2310      	movs	r3, #16
 80014e0:	e013      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e011      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ea:	e00e      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f0:	e00b      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f6:	e008      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	e005      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 80014fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001502:	e002      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 8001504:	2310      	movs	r3, #16
 8001506:	e000      	b.n	800150a <HAL_DMA_Abort_IT+0xfa>
 8001508:	2301      	movs	r3, #1
 800150a:	4a43      	ldr	r2, [pc, #268]	; (8001618 <HAL_DMA_Abort_IT+0x208>)
 800150c:	6053      	str	r3, [r2, #4]
 800150e:	e057      	b.n	80015c0 <HAL_DMA_Abort_IT+0x1b0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a36      	ldr	r2, [pc, #216]	; (80015f0 <HAL_DMA_Abort_IT+0x1e0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d04f      	beq.n	80015ba <HAL_DMA_Abort_IT+0x1aa>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <HAL_DMA_Abort_IT+0x1e4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d048      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x1a6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <HAL_DMA_Abort_IT+0x1e8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d040      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x1a0>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_DMA_Abort_IT+0x1ec>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d038      	beq.n	80015aa <HAL_DMA_Abort_IT+0x19a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_DMA_Abort_IT+0x1f0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d030      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x194>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_DMA_Abort_IT+0x1f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d028      	beq.n	800159e <HAL_DMA_Abort_IT+0x18e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_DMA_Abort_IT+0x1dc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d020      	beq.n	8001598 <HAL_DMA_Abort_IT+0x188>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_DMA_Abort_IT+0x1f8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d019      	beq.n	8001594 <HAL_DMA_Abort_IT+0x184>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_DMA_Abort_IT+0x1fc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d012      	beq.n	8001590 <HAL_DMA_Abort_IT+0x180>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a28      	ldr	r2, [pc, #160]	; (8001610 <HAL_DMA_Abort_IT+0x200>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00a      	beq.n	800158a <HAL_DMA_Abort_IT+0x17a>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <HAL_DMA_Abort_IT+0x204>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d102      	bne.n	8001584 <HAL_DMA_Abort_IT+0x174>
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	e01b      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 8001584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001588:	e018      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	e015      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 8001590:	2310      	movs	r3, #16
 8001592:	e013      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 8001594:	2301      	movs	r3, #1
 8001596:	e011      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 8001598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800159c:	e00e      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 800159e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015a2:	e00b      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 80015a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a8:	e008      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	e005      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 80015b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b4:	e002      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 80015b6:	2310      	movs	r3, #16
 80015b8:	e000      	b.n	80015bc <HAL_DMA_Abort_IT+0x1ac>
 80015ba:	2301      	movs	r3, #1
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_DMA_Abort_IT+0x20c>)
 80015be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
    } 
  }
  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020080 	.word	0x40020080
 80015f0:	40020008 	.word	0x40020008
 80015f4:	4002001c 	.word	0x4002001c
 80015f8:	40020030 	.word	0x40020030
 80015fc:	40020044 	.word	0x40020044
 8001600:	40020058 	.word	0x40020058
 8001604:	4002006c 	.word	0x4002006c
 8001608:	40020408 	.word	0x40020408
 800160c:	4002041c 	.word	0x4002041c
 8001610:	40020430 	.word	0x40020430
 8001614:	40020444 	.word	0x40020444
 8001618:	40020400 	.word	0x40020400
 800161c:	40020000 	.word	0x40020000

08001620 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2204      	movs	r2, #4
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80f1 	beq.w	800182c <HAL_DMA_IRQHandler+0x20c>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80eb 	beq.w	800182c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0204 	bic.w	r2, r2, #4
 8001672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <HAL_DMA_IRQHandler+0x1d8>)
 800167c:	429a      	cmp	r2, r3
 800167e:	d958      	bls.n	8001732 <HAL_DMA_IRQHandler+0x112>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a5d      	ldr	r2, [pc, #372]	; (80017fc <HAL_DMA_IRQHandler+0x1dc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d04f      	beq.n	800172a <HAL_DMA_IRQHandler+0x10a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a5c      	ldr	r2, [pc, #368]	; (8001800 <HAL_DMA_IRQHandler+0x1e0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d048      	beq.n	8001726 <HAL_DMA_IRQHandler+0x106>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a5a      	ldr	r2, [pc, #360]	; (8001804 <HAL_DMA_IRQHandler+0x1e4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d040      	beq.n	8001720 <HAL_DMA_IRQHandler+0x100>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a59      	ldr	r2, [pc, #356]	; (8001808 <HAL_DMA_IRQHandler+0x1e8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d038      	beq.n	800171a <HAL_DMA_IRQHandler+0xfa>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_DMA_IRQHandler+0x1ec>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d030      	beq.n	8001714 <HAL_DMA_IRQHandler+0xf4>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a56      	ldr	r2, [pc, #344]	; (8001810 <HAL_DMA_IRQHandler+0x1f0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d028      	beq.n	800170e <HAL_DMA_IRQHandler+0xee>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <HAL_DMA_IRQHandler+0x1d8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d020      	beq.n	8001708 <HAL_DMA_IRQHandler+0xe8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_DMA_IRQHandler+0x1f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d019      	beq.n	8001704 <HAL_DMA_IRQHandler+0xe4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_DMA_IRQHandler+0x1f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d012      	beq.n	8001700 <HAL_DMA_IRQHandler+0xe0>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_DMA_IRQHandler+0x1fc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00a      	beq.n	80016fa <HAL_DMA_IRQHandler+0xda>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <HAL_DMA_IRQHandler+0x200>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d102      	bne.n	80016f4 <HAL_DMA_IRQHandler+0xd4>
 80016ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f2:	e01b      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 80016f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016f8:	e018      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 80016fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fe:	e015      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	e013      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 8001704:	2304      	movs	r3, #4
 8001706:	e011      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 8001708:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800170c:	e00e      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 800170e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001712:	e00b      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 8001714:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001718:	e008      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 800171a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171e:	e005      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 8001720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001724:	e002      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	e000      	b.n	800172c <HAL_DMA_IRQHandler+0x10c>
 800172a:	2304      	movs	r3, #4
 800172c:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <HAL_DMA_IRQHandler+0x204>)
 800172e:	6053      	str	r3, [r2, #4]
 8001730:	e057      	b.n	80017e2 <HAL_DMA_IRQHandler+0x1c2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <HAL_DMA_IRQHandler+0x1dc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04f      	beq.n	80017dc <HAL_DMA_IRQHandler+0x1bc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_DMA_IRQHandler+0x1e0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d048      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x1b8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <HAL_DMA_IRQHandler+0x1e4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d040      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x1b2>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a2c      	ldr	r2, [pc, #176]	; (8001808 <HAL_DMA_IRQHandler+0x1e8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d038      	beq.n	80017cc <HAL_DMA_IRQHandler+0x1ac>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2b      	ldr	r2, [pc, #172]	; (800180c <HAL_DMA_IRQHandler+0x1ec>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d030      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x1a6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_DMA_IRQHandler+0x1f0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d028      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x1a0>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_DMA_IRQHandler+0x1d8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d020      	beq.n	80017ba <HAL_DMA_IRQHandler+0x19a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <HAL_DMA_IRQHandler+0x1f4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x196>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_DMA_IRQHandler+0x1f8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d012      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x192>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a22      	ldr	r2, [pc, #136]	; (800181c <HAL_DMA_IRQHandler+0x1fc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00a      	beq.n	80017ac <HAL_DMA_IRQHandler+0x18c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_DMA_IRQHandler+0x200>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d102      	bne.n	80017a6 <HAL_DMA_IRQHandler+0x186>
 80017a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017a4:	e01b      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017aa:	e018      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b0:	e015      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017b2:	2340      	movs	r3, #64	; 0x40
 80017b4:	e013      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017b6:	2304      	movs	r3, #4
 80017b8:	e011      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017be:	e00e      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c4:	e00b      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017ca:	e008      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d0:	e005      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d6:	e002      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017d8:	2340      	movs	r3, #64	; 0x40
 80017da:	e000      	b.n	80017de <HAL_DMA_IRQHandler+0x1be>
 80017dc:	2304      	movs	r3, #4
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_DMA_IRQHandler+0x208>)
 80017e0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8136 	beq.w	8001a58 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	e130      	b.n	8001a58 <HAL_DMA_IRQHandler+0x438>
 80017f6:	bf00      	nop
 80017f8:	40020080 	.word	0x40020080
 80017fc:	40020008 	.word	0x40020008
 8001800:	4002001c 	.word	0x4002001c
 8001804:	40020030 	.word	0x40020030
 8001808:	40020044 	.word	0x40020044
 800180c:	40020058 	.word	0x40020058
 8001810:	4002006c 	.word	0x4002006c
 8001814:	40020408 	.word	0x40020408
 8001818:	4002041c 	.word	0x4002041c
 800181c:	40020430 	.word	0x40020430
 8001820:	40020444 	.word	0x40020444
 8001824:	40020400 	.word	0x40020400
 8001828:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2202      	movs	r2, #2
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80dd 	beq.w	80019f8 <HAL_DMA_IRQHandler+0x3d8>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80d7 	beq.w	80019f8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10b      	bne.n	8001870 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 020a 	bic.w	r2, r2, #10
 8001866:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_DMA_IRQHandler+0x444>)
 8001878:	429a      	cmp	r2, r3
 800187a:	d958      	bls.n	800192e <HAL_DMA_IRQHandler+0x30e>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <HAL_DMA_IRQHandler+0x448>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d04f      	beq.n	8001926 <HAL_DMA_IRQHandler+0x306>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a78      	ldr	r2, [pc, #480]	; (8001a6c <HAL_DMA_IRQHandler+0x44c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d048      	beq.n	8001922 <HAL_DMA_IRQHandler+0x302>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a76      	ldr	r2, [pc, #472]	; (8001a70 <HAL_DMA_IRQHandler+0x450>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d040      	beq.n	800191c <HAL_DMA_IRQHandler+0x2fc>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <HAL_DMA_IRQHandler+0x454>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d038      	beq.n	8001916 <HAL_DMA_IRQHandler+0x2f6>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a73      	ldr	r2, [pc, #460]	; (8001a78 <HAL_DMA_IRQHandler+0x458>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d030      	beq.n	8001910 <HAL_DMA_IRQHandler+0x2f0>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_DMA_IRQHandler+0x45c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d028      	beq.n	800190a <HAL_DMA_IRQHandler+0x2ea>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_DMA_IRQHandler+0x444>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d020      	beq.n	8001904 <HAL_DMA_IRQHandler+0x2e4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6e      	ldr	r2, [pc, #440]	; (8001a80 <HAL_DMA_IRQHandler+0x460>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d019      	beq.n	8001900 <HAL_DMA_IRQHandler+0x2e0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6c      	ldr	r2, [pc, #432]	; (8001a84 <HAL_DMA_IRQHandler+0x464>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d012      	beq.n	80018fc <HAL_DMA_IRQHandler+0x2dc>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6b      	ldr	r2, [pc, #428]	; (8001a88 <HAL_DMA_IRQHandler+0x468>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00a      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x2d6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a69      	ldr	r2, [pc, #420]	; (8001a8c <HAL_DMA_IRQHandler+0x46c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d102      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x2d0>
 80018ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ee:	e01b      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 80018f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f4:	e018      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 80018f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fa:	e015      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 80018fc:	2320      	movs	r3, #32
 80018fe:	e013      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 8001900:	2302      	movs	r3, #2
 8001902:	e011      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 8001904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001908:	e00e      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 800190a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800190e:	e00b      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 8001910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001914:	e008      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	e005      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 800191c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001920:	e002      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 8001922:	2320      	movs	r3, #32
 8001924:	e000      	b.n	8001928 <HAL_DMA_IRQHandler+0x308>
 8001926:	2302      	movs	r3, #2
 8001928:	4a59      	ldr	r2, [pc, #356]	; (8001a90 <HAL_DMA_IRQHandler+0x470>)
 800192a:	6053      	str	r3, [r2, #4]
 800192c:	e057      	b.n	80019de <HAL_DMA_IRQHandler+0x3be>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_DMA_IRQHandler+0x448>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04f      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x3b8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_DMA_IRQHandler+0x44c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d048      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x3b4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_DMA_IRQHandler+0x450>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d040      	beq.n	80019ce <HAL_DMA_IRQHandler+0x3ae>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a48      	ldr	r2, [pc, #288]	; (8001a74 <HAL_DMA_IRQHandler+0x454>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d038      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x3a8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a47      	ldr	r2, [pc, #284]	; (8001a78 <HAL_DMA_IRQHandler+0x458>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d030      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x3a2>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <HAL_DMA_IRQHandler+0x45c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d028      	beq.n	80019bc <HAL_DMA_IRQHandler+0x39c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <HAL_DMA_IRQHandler+0x444>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d020      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x396>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_DMA_IRQHandler+0x460>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x392>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a40      	ldr	r2, [pc, #256]	; (8001a84 <HAL_DMA_IRQHandler+0x464>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d012      	beq.n	80019ae <HAL_DMA_IRQHandler+0x38e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a3e      	ldr	r2, [pc, #248]	; (8001a88 <HAL_DMA_IRQHandler+0x468>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x388>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a3d      	ldr	r2, [pc, #244]	; (8001a8c <HAL_DMA_IRQHandler+0x46c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d102      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x382>
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	e01b      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a6:	e018      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	e015      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019ae:	2320      	movs	r3, #32
 80019b0:	e013      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e011      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ba:	e00e      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019c0:	e00b      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c6:	e008      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019cc:	e005      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d2:	e002      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019d4:	2320      	movs	r3, #32
 80019d6:	e000      	b.n	80019da <HAL_DMA_IRQHandler+0x3ba>
 80019d8:	2302      	movs	r3, #2
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_DMA_IRQHandler+0x474>)
 80019dc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d034      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019f6:	e02f      	b.n	8001a58 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2208      	movs	r2, #8
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d028      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x43a>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d023      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 020e 	bic.w	r2, r2, #14
 8001a20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
    }
  }
  return;
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
}
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40020080 	.word	0x40020080
 8001a68:	40020008 	.word	0x40020008
 8001a6c:	4002001c 	.word	0x4002001c
 8001a70:	40020030 	.word	0x40020030
 8001a74:	40020044 	.word	0x40020044
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	4002006c 	.word	0x4002006c
 8001a80:	40020408 	.word	0x40020408
 8001a84:	4002041c 	.word	0x4002041c
 8001a88:	40020430 	.word	0x40020430
 8001a8c:	40020444 	.word	0x40020444
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020000 	.word	0x40020000

08001a98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d108      	bne.n	8001ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ad6:	e007      	b.n	8001ae8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	e179      	b.n	8001dfc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 8168 	bne.w	8001df6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a96      	ldr	r2, [pc, #600]	; (8001d84 <HAL_GPIO_Init+0x290>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d05e      	beq.n	8001bee <HAL_GPIO_Init+0xfa>
 8001b30:	4a94      	ldr	r2, [pc, #592]	; (8001d84 <HAL_GPIO_Init+0x290>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d875      	bhi.n	8001c22 <HAL_GPIO_Init+0x12e>
 8001b36:	4a94      	ldr	r2, [pc, #592]	; (8001d88 <HAL_GPIO_Init+0x294>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d058      	beq.n	8001bee <HAL_GPIO_Init+0xfa>
 8001b3c:	4a92      	ldr	r2, [pc, #584]	; (8001d88 <HAL_GPIO_Init+0x294>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d86f      	bhi.n	8001c22 <HAL_GPIO_Init+0x12e>
 8001b42:	4a92      	ldr	r2, [pc, #584]	; (8001d8c <HAL_GPIO_Init+0x298>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d052      	beq.n	8001bee <HAL_GPIO_Init+0xfa>
 8001b48:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_GPIO_Init+0x298>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d869      	bhi.n	8001c22 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a90      	ldr	r2, [pc, #576]	; (8001d90 <HAL_GPIO_Init+0x29c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d04c      	beq.n	8001bee <HAL_GPIO_Init+0xfa>
 8001b54:	4a8e      	ldr	r2, [pc, #568]	; (8001d90 <HAL_GPIO_Init+0x29c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d863      	bhi.n	8001c22 <HAL_GPIO_Init+0x12e>
 8001b5a:	4a8e      	ldr	r2, [pc, #568]	; (8001d94 <HAL_GPIO_Init+0x2a0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d046      	beq.n	8001bee <HAL_GPIO_Init+0xfa>
 8001b60:	4a8c      	ldr	r2, [pc, #560]	; (8001d94 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d85d      	bhi.n	8001c22 <HAL_GPIO_Init+0x12e>
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d82a      	bhi.n	8001bc0 <HAL_GPIO_Init+0xcc>
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d859      	bhi.n	8001c22 <HAL_GPIO_Init+0x12e>
 8001b6e:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <HAL_GPIO_Init+0x80>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bc9 	.word	0x08001bc9
 8001b7c:	08001bdb 	.word	0x08001bdb
 8001b80:	08001c1d 	.word	0x08001c1d
 8001b84:	08001c23 	.word	0x08001c23
 8001b88:	08001c23 	.word	0x08001c23
 8001b8c:	08001c23 	.word	0x08001c23
 8001b90:	08001c23 	.word	0x08001c23
 8001b94:	08001c23 	.word	0x08001c23
 8001b98:	08001c23 	.word	0x08001c23
 8001b9c:	08001c23 	.word	0x08001c23
 8001ba0:	08001c23 	.word	0x08001c23
 8001ba4:	08001c23 	.word	0x08001c23
 8001ba8:	08001c23 	.word	0x08001c23
 8001bac:	08001c23 	.word	0x08001c23
 8001bb0:	08001c23 	.word	0x08001c23
 8001bb4:	08001c23 	.word	0x08001c23
 8001bb8:	08001bd1 	.word	0x08001bd1
 8001bbc:	08001be5 	.word	0x08001be5
 8001bc0:	4a75      	ldr	r2, [pc, #468]	; (8001d98 <HAL_GPIO_Init+0x2a4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bc6:	e02c      	b.n	8001c22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	623b      	str	r3, [r7, #32]
          break;
 8001bce:	e029      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	623b      	str	r3, [r7, #32]
          break;
 8001bd8:	e024      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	3308      	adds	r3, #8
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e01f      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	330c      	adds	r3, #12
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e01a      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	623b      	str	r3, [r7, #32]
          break;
 8001bfa:	e013      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	611a      	str	r2, [r3, #16]
          break;
 8001c0e:	e009      	b.n	8001c24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	615a      	str	r2, [r3, #20]
          break;
 8001c1a:	e003      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
          break;
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x130>
          break;
 8001c22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2bff      	cmp	r3, #255	; 0xff
 8001c28:	d801      	bhi.n	8001c2e <HAL_GPIO_Init+0x13a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	e001      	b.n	8001c32 <HAL_GPIO_Init+0x13e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3304      	adds	r3, #4
 8001c32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2bff      	cmp	r3, #255	; 0xff
 8001c38:	d802      	bhi.n	8001c40 <HAL_GPIO_Init+0x14c>
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x152>
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	3b08      	subs	r3, #8
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	210f      	movs	r1, #15
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	431a      	orrs	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80c1 	beq.w	8001df6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_GPIO_Init+0x2a8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_GPIO_Init+0x2a8>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_GPIO_Init+0x2a8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c8c:	4a44      	ldr	r2, [pc, #272]	; (8001da0 <HAL_GPIO_Init+0x2ac>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_GPIO_Init+0x2b0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d01f      	beq.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3b      	ldr	r2, [pc, #236]	; (8001da8 <HAL_GPIO_Init+0x2b4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d019      	beq.n	8001cf4 <HAL_GPIO_Init+0x200>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_GPIO_Init+0x2b8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_GPIO_Init+0x1fc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <HAL_GPIO_Init+0x2bc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00d      	beq.n	8001cec <HAL_GPIO_Init+0x1f8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a38      	ldr	r2, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x2c0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <HAL_GPIO_Init+0x1f4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <HAL_GPIO_Init+0x2c4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_GPIO_Init+0x1f0>
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	e00a      	b.n	8001cfa <HAL_GPIO_Init+0x206>
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	e008      	b.n	8001cfa <HAL_GPIO_Init+0x206>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e006      	b.n	8001cfa <HAL_GPIO_Init+0x206>
 8001cec:	2303      	movs	r3, #3
 8001cee:	e004      	b.n	8001cfa <HAL_GPIO_Init+0x206>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x206>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_GPIO_Init+0x206>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	f002 0203 	and.w	r2, r2, #3
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4093      	lsls	r3, r2
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d0a:	4925      	ldr	r1, [pc, #148]	; (8001da0 <HAL_GPIO_Init+0x2ac>)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4924      	ldr	r1, [pc, #144]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4920      	ldr	r1, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	491a      	ldr	r1, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4916      	ldr	r1, [pc, #88]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d025      	beq.n	8001dc0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	4910      	ldr	r1, [pc, #64]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
 8001d80:	e025      	b.n	8001dce <HAL_GPIO_Init+0x2da>
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40011400 	.word	0x40011400
 8001db4:	40011800 	.word	0x40011800
 8001db8:	40011c00 	.word	0x40011c00
 8001dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4913      	ldr	r1, [pc, #76]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	490e      	ldr	r1, [pc, #56]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	3301      	adds	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f47f ae7e 	bne.w	8001b08 <HAL_GPIO_Init+0x14>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	372c      	adds	r7, #44	; 0x2c
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e272      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e78:	4b8f      	ldr	r3, [pc, #572]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d112      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5e>
 8001e84:	4b8c      	ldr	r3, [pc, #560]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d06c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x12c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d168      	bne.n	8001f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e24c      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x76>
 8001eb4:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a7f      	ldr	r2, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e02e      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b7b      	ldr	r3, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7a      	ldr	r2, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a77      	ldr	r2, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0xbc>
 8001eee:	4b72      	ldr	r3, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a71      	ldr	r2, [pc, #452]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6e      	ldr	r2, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001f08:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a67      	ldr	r2, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f826 	bl	8000f78 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f822 	bl	8000f78 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e200      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe4>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f812 	bl	8000f78 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f80e 	bl	8000f78 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1ec      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x10c>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f86:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f92:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18c>
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x176>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1c0      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4939      	ldr	r1, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x270>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ffc7 	bl	8000f78 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7fe ffc3 	bl	8000f78 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1a1      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4927      	ldr	r1, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x270>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe ffa6 	bl	8000f78 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe ffa2 	bl	8000f78 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e180      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03a      	beq.n	80020d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d019      	beq.n	8002096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_RCC_OscConfig+0x274>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7fe ff86 	bl	8000f78 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7fe ff82 	bl	8000f78 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e160      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fad8 	bl	8002644 <RCC_Delay>
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_OscConfig+0x274>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7fe ff6c 	bl	8000f78 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe ff68 	bl	8000f78 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d908      	bls.n	80020c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e146      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	42420000 	.word	0x42420000
 80020c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e9      	bne.n	80020a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a6 	beq.w	800222a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b8b      	ldr	r3, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a87      	ldr	r2, [pc, #540]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b82      	ldr	r3, [pc, #520]	; (8002314 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <HAL_RCC_OscConfig+0x4c8>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7fe ff29 	bl	8000f78 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe ff25 	bl	8000f78 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e103      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b75      	ldr	r3, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x4c8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x312>
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e02d      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x334>
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	e01c      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x356>
 8002188:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a60      	ldr	r2, [pc, #384]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 80021a2:	4b5b      	ldr	r3, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d015      	beq.n	80021ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fed9 	bl	8000f78 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fed5 	bl	8000f78 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0b1      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCC_OscConfig+0x37e>
 80021ec:	e014      	b.n	8002218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fec3 	bl	8000f78 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe febf 	bl	8000f78 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e09b      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d061      	beq.n	8002304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d146      	bne.n	80022d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fe93 	bl	8000f78 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fe8f 	bl	8000f78 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e06d      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d108      	bne.n	8002290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4921      	ldr	r1, [pc, #132]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a19      	ldr	r1, [r3, #32]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	430b      	orrs	r3, r1
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe63 	bl	8000f78 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fe5f 	bl	8000f78 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e03d      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46a>
 80022d4:	e035      	b.n	8002342 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_OscConfig+0x4cc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fe4c 	bl	8000f78 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe fe48 	bl	8000f78 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e026      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x498>
 8002302:	e01e      	b.n	8002342 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e019      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_OscConfig+0x500>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7fe fd9a 	bl	8000f78 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe fd96 	bl	8000f78 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fcf8 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	0801fae8 	.word	0x0801fae8
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b490      	push	{r4, r7}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800252c:	1d3c      	adds	r4, r7, #4
 800252e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002534:	f240 2301 	movw	r3, #513	; 0x201
 8002538:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x46>
 8002562:	e02b      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	e02b      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3328      	adds	r3, #40	; 0x28
 8002574:	443b      	add	r3, r7
 8002576:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800257a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0c5b      	lsrs	r3, r3, #17
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	3328      	adds	r3, #40	; 0x28
 8002592:	443b      	add	r3, r7
 8002594:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002598:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259e:	fb03 f202 	mul.w	r2, r3, r2
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e004      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	623b      	str	r3, [r7, #32]
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025be:	623b      	str	r3, [r7, #32]
      break;
 80025c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c2:	6a3b      	ldr	r3, [r7, #32]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc90      	pop	{r4, r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	080038d8 	.word	0x080038d8
 80025d4:	40021000 	.word	0x40021000
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	003d0900 	.word	0x003d0900

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b02      	ldr	r3, [pc, #8]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff2 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	0801faf8 	.word	0x0801faf8

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffde 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0adb      	lsrs	r3, r3, #11
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	0801faf8 	.word	0x0801faf8

08002644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <RCC_Delay+0x34>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	; (800267c <RCC_Delay+0x38>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a5b      	lsrs	r3, r3, #9
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002660:	bf00      	nop
  }
  while (Delay --);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f9      	bne.n	8002660 <RCC_Delay+0x1c>
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000000 	.word	0x20000000
 800267c:	10624dd3 	.word	0x10624dd3

08002680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e076      	b.n	8002780 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a2:	d009      	beq.n	80026b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	e005      	b.n	80026b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fa14 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	ea42 0103 	orr.w	r1, r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	0c1a      	lsrs	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f002 0204 	and.w	r2, r2, #4
 800275e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_SPI_Transmit_DMA+0x20>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e09b      	b.n	80028e0 <HAL_SPI_Transmit_DMA+0x158>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d002      	beq.n	80027c2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027c0:	e089      	b.n	80028d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_SPI_Transmit_DMA+0x46>
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027d2:	e080      	b.n	80028d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2203      	movs	r2, #3
 80027d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281a:	d10f      	bne.n	800283c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002840:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <HAL_SPI_Transmit_DMA+0x160>)
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_SPI_Transmit_DMA+0x164>)
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_SPI_Transmit_DMA+0x168>)
 8002852:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	2200      	movs	r2, #0
 800285a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4619      	mov	r1, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002872:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002874:	f7fe fd32 	bl	80012dc <HAL_DMA_Start_IT>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002896:	e01e      	b.n	80028d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d007      	beq.n	80028b6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0202 	orr.w	r2, r2, #2
 80028d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	080029d1 	.word	0x080029d1
 80028ec:	0800292b 	.word	0x0800292b
 80028f0:	080029ed 	.word	0x080029ed

080028f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002938:	f7fe fb1e 	bl	8000f78 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b20      	cmp	r3, #32
 800294a:	d03b      	beq.n	80029c4 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0220 	bic.w	r2, r2, #32
 800295a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0202 	bic.w	r2, r2, #2
 800296a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	6978      	ldr	r0, [r7, #20]
 8002972:	f000 f8e3 	bl	8002b3c <SPI_EndRxTxTransaction>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ffab 	bl	8002918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029c2:	e002      	b.n	80029ca <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80029c4:	6978      	ldr	r0, [r7, #20]
 80029c6:	f7ff ff95 	bl	80028f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff ff91 	bl	8002906 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0203 	bic.w	r2, r2, #3
 8002a08:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff ff7a 	bl	8002918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a3c:	f7fe fa9c 	bl	8000f78 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a4c:	f7fe fa94 	bl	8000f78 <HAL_GetTick>
 8002a50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	015b      	lsls	r3, r3, #5
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a62:	e054      	b.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d050      	beq.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a6c:	f7fe fa84 	bl	8000f78 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d902      	bls.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d13d      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9a:	d111      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa4:	d004      	beq.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d107      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac8:	d10f      	bne.n	8002aea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e017      	b.n	8002b2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d19b      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ff6a 	bl	8002a2c <SPI_WaitFlagStateUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e000      	b.n	8002b70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e041      	b.n	8002c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe f8c8 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 f962 	bl	8002e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d122      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d11b      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0202 	mvn.w	r2, #2
 8002c42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8f6 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e005      	b.n	8002c6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f8e9 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8f8 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d122      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0204 	mvn.w	r2, #4
 8002c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8cc 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 8002cb2:	e005      	b.n	8002cc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8bf 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8ce 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d122      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d11b      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0208 	mvn.w	r2, #8
 8002cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8a2 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 8002d06:	e005      	b.n	8002d14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f895 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8a4 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d122      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d11b      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0210 	mvn.w	r2, #16
 8002d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2208      	movs	r2, #8
 8002d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f878 	bl	8002e4a <HAL_TIM_IC_CaptureCallback>
 8002d5a:	e005      	b.n	8002d68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f86b 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f87a 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10e      	bne.n	8002d9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f06f 0201 	mvn.w	r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f846 	bl	8002e26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d10e      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d107      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f94c 	bl	800305e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d10e      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f83e 	bl	8002e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d10e      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d107      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0220 	mvn.w	r2, #32
 8002e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f917 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <TIM_Base_SetConfig+0xe0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a32      	ldr	r2, [pc, #200]	; (8002f64 <TIM_Base_SetConfig+0xe4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00f      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <TIM_Base_SetConfig+0xe8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2e      	ldr	r2, [pc, #184]	; (8002f6c <TIM_Base_SetConfig+0xec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <TIM_Base_SetConfig+0xf0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <TIM_Base_SetConfig+0xe0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <TIM_Base_SetConfig+0x82>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <TIM_Base_SetConfig+0xe4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00f      	beq.n	8002f02 <TIM_Base_SetConfig+0x82>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d00b      	beq.n	8002f02 <TIM_Base_SetConfig+0x82>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <TIM_Base_SetConfig+0xe8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <TIM_Base_SetConfig+0x82>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <TIM_Base_SetConfig+0xec>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <TIM_Base_SetConfig+0x82>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <TIM_Base_SetConfig+0xf0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d108      	bne.n	8002f14 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <TIM_Base_SetConfig+0xe0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0xc8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <TIM_Base_SetConfig+0xe4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40013400 	.word	0x40013400
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40000c00 	.word	0x40000c00

08002f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e050      	b.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d00e      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a15      	ldr	r2, [pc, #84]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a12      	ldr	r2, [pc, #72]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10c      	bne.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4313      	orrs	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40013400 	.word	0x40013400
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e03f      	b.n	8003102 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fe9c 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fb49 	bl	800374c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_UART_IRQHandler+0x52>
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa4f 	bl	80035fa <UART_Receive_IT>
      return;
 800315c:	e17b      	b.n	8003456 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80b1 	beq.w	80032c8 <HAL_UART_IRQHandler+0x1bc>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_UART_IRQHandler+0x70>
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80a6 	beq.w	80032c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_UART_IRQHandler+0x90>
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_UART_IRQHandler+0xb0>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0202 	orr.w	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_UART_IRQHandler+0xd0>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00f      	beq.n	8003206 <HAL_UART_IRQHandler+0xfa>
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_UART_IRQHandler+0xee>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0208 	orr.w	r2, r3, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 811e 	beq.w	800344c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_UART_IRQHandler+0x11e>
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9e8 	bl	80035fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <HAL_UART_IRQHandler+0x146>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d031      	beq.n	80032b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f92a 	bl	80034ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d023      	beq.n	80032ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003274:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	2b00      	cmp	r3, #0
 800327c:	d013      	beq.n	80032a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	4a76      	ldr	r2, [pc, #472]	; (800345c <HAL_UART_IRQHandler+0x350>)
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe f8c0 	bl	8001410 <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e00e      	b.n	80032c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8ec 	bl	8003484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e00a      	b.n	80032c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8e8 	bl	8003484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e006      	b.n	80032c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8e4 	bl	8003484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032c2:	e0c3      	b.n	800344c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	bf00      	nop
    return;
 80032c6:	e0c1      	b.n	800344c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 80a1 	bne.w	8003414 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 809b 	beq.w	8003414 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8095 	beq.w	8003414 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d04e      	beq.n	80033ac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003318:	8a3b      	ldrh	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8098 	beq.w	8003450 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003324:	8a3a      	ldrh	r2, [r7, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	f080 8092 	bcs.w	8003450 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8a3a      	ldrh	r2, [r7, #16]
 8003330:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b20      	cmp	r3, #32
 800333a:	d02b      	beq.n	8003394 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0210 	bic.w	r2, r2, #16
 8003388:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe f803 	bl	800139a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800339c:	b29b      	uxth	r3, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f876 	bl	8003496 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033aa:	e051      	b.n	8003450 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d047      	beq.n	8003454 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80033c4:	8a7b      	ldrh	r3, [r7, #18]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d044      	beq.n	8003454 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0210 	bic.w	r2, r2, #16
 8003406:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003408:	8a7b      	ldrh	r3, [r7, #18]
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f842 	bl	8003496 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003412:	e01f      	b.n	8003454 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_UART_IRQHandler+0x324>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f87f 	bl	800352c <UART_Transmit_IT>
    return;
 800342e:	e012      	b.n	8003456 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_UART_IRQHandler+0x34a>
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8c0 	bl	80035ca <UART_EndTransmit_IT>
    return;
 800344a:	e004      	b.n	8003456 <HAL_UART_IRQHandler+0x34a>
    return;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <HAL_UART_IRQHandler+0x34a>
      return;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <HAL_UART_IRQHandler+0x34a>
      return;
 8003454:	bf00      	nop
  }
}
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08003505 	.word	0x08003505

08003460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d107      	bne.n	80034ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0210 	bic.w	r2, r2, #16
 80034ea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff ffb0 	bl	8003484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b21      	cmp	r3, #33	; 0x21
 800353e:	d13e      	bne.n	80035be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d114      	bne.n	8003574 <UART_Transmit_IT+0x48>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d110      	bne.n	8003574 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003566:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]
 8003572:	e008      	b.n	8003586 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6211      	str	r1, [r2, #32]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4619      	mov	r1, r3
 8003594:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff38 	bl	8003460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b22      	cmp	r3, #34	; 0x22
 800360c:	f040 8099 	bne.w	8003742 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003618:	d117      	bne.n	800364a <UART_Receive_IT+0x50>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d113      	bne.n	800364a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	b29a      	uxth	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
 8003648:	e026      	b.n	8003698 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d007      	beq.n	800366e <UART_Receive_IT+0x74>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <UART_Receive_IT+0x82>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e008      	b.n	800368e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003688:	b2da      	uxtb	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d148      	bne.n	800373e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0220 	bic.w	r2, r2, #32
 80036ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d123      	bne.n	8003734 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0210 	bic.w	r2, r2, #16
 8003700:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d10a      	bne.n	8003726 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff feb2 	bl	8003496 <HAL_UARTEx_RxEventCallback>
 8003732:	e002      	b.n	800373a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fe9c 	bl	8003472 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e002      	b.n	8003744 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
  }
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003786:	f023 030c 	bic.w	r3, r3, #12
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	430b      	orrs	r3, r1
 8003792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <UART_SetConfig+0x114>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7fe ff32 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	e002      	b.n	80037c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7fe ff1a 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <UART_SetConfig+0x118>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	0119      	lsls	r1, r3, #4
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009a      	lsls	r2, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f8:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <UART_SetConfig+0x118>)
 80037fa:	fba3 0302 	umull	r0, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2064      	movs	r0, #100	; 0x64
 8003802:	fb00 f303 	mul.w	r3, r0, r3
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	3332      	adds	r3, #50	; 0x32
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <UART_SetConfig+0x118>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	4419      	add	r1, r3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009a      	lsls	r2, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <UART_SetConfig+0x118>)
 8003832:	fba3 0302 	umull	r0, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2064      	movs	r0, #100	; 0x64
 800383a:	fb00 f303 	mul.w	r3, r0, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	3332      	adds	r3, #50	; 0x32
 8003844:	4a07      	ldr	r2, [pc, #28]	; (8003864 <UART_SetConfig+0x118>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	440a      	add	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40013800 	.word	0x40013800
 8003864:	51eb851f 	.word	0x51eb851f

08003868 <__libc_init_array>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	2600      	movs	r6, #0
 800386c:	4d0c      	ldr	r5, [pc, #48]	; (80038a0 <__libc_init_array+0x38>)
 800386e:	4c0d      	ldr	r4, [pc, #52]	; (80038a4 <__libc_init_array+0x3c>)
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	42a6      	cmp	r6, r4
 8003876:	d109      	bne.n	800388c <__libc_init_array+0x24>
 8003878:	f000 f822 	bl	80038c0 <_init>
 800387c:	2600      	movs	r6, #0
 800387e:	4d0a      	ldr	r5, [pc, #40]	; (80038a8 <__libc_init_array+0x40>)
 8003880:	4c0a      	ldr	r4, [pc, #40]	; (80038ac <__libc_init_array+0x44>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	42a6      	cmp	r6, r4
 8003888:	d105      	bne.n	8003896 <__libc_init_array+0x2e>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003890:	4798      	blx	r3
 8003892:	3601      	adds	r6, #1
 8003894:	e7ee      	b.n	8003874 <__libc_init_array+0xc>
 8003896:	f855 3b04 	ldr.w	r3, [r5], #4
 800389a:	4798      	blx	r3
 800389c:	3601      	adds	r6, #1
 800389e:	e7f2      	b.n	8003886 <__libc_init_array+0x1e>
 80038a0:	0801fb00 	.word	0x0801fb00
 80038a4:	0801fb00 	.word	0x0801fb00
 80038a8:	0801fb00 	.word	0x0801fb00
 80038ac:	0801fb04 	.word	0x0801fb04

080038b0 <memset>:
 80038b0:	4603      	mov	r3, r0
 80038b2:	4402      	add	r2, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <_init>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr

080038cc <_fini>:
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	bf00      	nop
 80038d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d2:	bc08      	pop	{r3}
 80038d4:	469e      	mov	lr, r3
 80038d6:	4770      	bx	lr
